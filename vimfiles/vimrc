" Maintainer:	Konstantin Milchev <konstantin.milchev@gmail.com>
" Last change:	2023 March 7


" Set this to 1 to use ultisnips for snippet handling
let s:using_snippets = 0

" Plugs {{{
"Defaults to ~/vimrc/plugged
call plug#begin('~/vimfiles/plugged')

Plug 'https://github.com/preservim/nerdtree.git'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/dhruvasagar/vim-table-mode.git'
Plug 'instant-markdown/vim-instant-markdown', {'for': 'markdown', 'do': 'yarn install'}
Plug 'sheerun/vim-polyglot'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

Plug 'OmniSharp/omnisharp-vim'


" Mappings, code-actions available flag and statusline integration
Plug 'nickspoons/vim-sharpenup'

" Linting/error highlighting
Plug 'dense-analysis/ale'

" Vim FZF integration, used as OmniSharp selector
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" Autocompletion
Plug 'prabirshrestha/asyncomplete.vim'

" Colorscheme
Plug 'morhetz/gruvbox'

" Statusline
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'shinchu/lightline-gruvbox.vim'

" Snippet support
if s:using_snippets
  Plug 'sirver/ultisnips'
endif

call plug#end()
" }}}

" Settings: {{{
filetype indent plugin on
if !exists('g:syntax_on') | syntax enable | endif
set encoding=utf-8
scriptencoding utf-8


set completeopt=menuone,noinsert,noselect,popuphidden
set completepopup=highlight:Pmenu,border:off

set backspace=indent,eol,start
set expandtab
set shiftround
set shiftwidth=4
set softtabstop=-1
set tabstop=8
set textwidth=80
set title

set hidden
set nofixendofline
set nostartofline
set splitbelow
set splitright

set nohlsearch
set incsearch
set laststatus=2
set nonumber
set noruler
set noshowmode
set signcolumn=yes

set mouse=a
set updatetime=1000
" }}}

" Colors: {{{
augroup ColorschemePreferences
  autocmd!
  " These preferences clear some gruvbox background colours, allowing transparency
  "autocmd ColorScheme * highlight Normal     ctermbg=NONE guibg=NONE
  autocmd ColorScheme * highlight SignColumn ctermbg=NONE guibg=NONE
  autocmd ColorScheme * highlight Todo       ctermbg=NONE guibg=NONE
  " Link ALE sign highlights to similar equivalents without background colours
  autocmd ColorScheme * highlight link ALEErrorSign   WarningMsg
  autocmd ColorScheme * highlight link ALEWarningSign ModeMsg
  autocmd ColorScheme * highlight link ALEInfoSign    Identifier
augroup END

" Use truecolor in the terminal, when it is supported
if has('termguicolors')
  set termguicolors
endif

colorscheme gruvbox
set background=dark
let g:gruvbox_contrast_dark = 'hard'
" }}}

"" ALE: {{{
let g:ale_linters = { 'cs': ['OmniSharp'] }

let g:ale_sign_error = '✘'
let g:ale_sign_warning = '!'
let g:ale_sign_info = '·'
let g:ale_sign_style_error = '·'
let g:ale_sign_style_warning = '·'

" }}}

" Asyncomplete: {{{
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0
" }}}

" Sharpenup: {{{
" All sharpenup mappings will begin with `<Space>os`, e.g. `<Space>osgd` for
" :OmniSharpGotoDefinition
let g:sharpenup_map_prefix = '<Space>os'

let g:sharpenup_statusline_opts = { 'Text': '%s (%p/%P)' }
let g:sharpenup_statusline_opts.Highlight = 0

augroup OmniSharpIntegrations
  autocmd!
  autocmd User OmniSharpProjectUpdated,OmniSharpReady call lightline#update()
augroup END
" }}}

" Lightline: {{{
let g:lightline = {
\ 'colorscheme': 'gruvbox',
\ 'active': {
\   'right': [
\     ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok'],
\     ['lineinfo'], ['percent'],
\     ['fileformat', 'fileencoding', 'filetype', 'sharpenup']
\   ]
\ },
\ 'inactive': {
\   'right': [['lineinfo'], ['percent'], ['sharpenup']]
\ },
\ 'component': {
\   'sharpenup': sharpenup#statusline#Build()
\ },
\ 'component_expand': {
\   'linter_checking': 'lightline#ale#checking',
\   'linter_infos': 'lightline#ale#infos',
\   'linter_warnings': 'lightline#ale#warnings',
\   'linter_errors': 'lightline#ale#errors',
\   'linter_ok': 'lightline#ale#ok'
  \  },
  \ 'component_type': {
  \   'linter_checking': 'right',
  \   'linter_infos': 'right',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'right'
\  }
\}
" Use unicode chars for ale indicators in the statusline
let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_infos = "\uf129 "
let g:lightline#ale#indicator_warnings = "\uf071 "
let g:lightline#ale#indicator_errors = "\uf05e "
let g:lightline#ale#indicator_ok = "\uf00c "
" }}}

" OmniSharp: {{{
let g:OmniSharp_popup_position = 'peek'
if has('nvim')
  let g:OmniSharp_popup_options = {
  \ 'winblend': 30,
  \ 'winhl': 'Normal:Normal,FloatBorder:ModeMsg',
  \ 'border': 'rounded'
  \}
else
  let g:OmniSharp_popup_options = {
  \ 'highlight': 'Normal',
  \ 'padding': [0],
  \ 'border': [1],
  \ 'borderchars': ['─', '│', '─', '│', '╭', '╮', '╯', '╰'],
  \ 'borderhighlight': ['ModeMsg']
  \}
endif
let g:OmniSharp_popup_mappings = {
\ 'sigNext': '<C-n>',
\ 'sigPrev': '<C-p>',
\ 'pageDown': ['<C-f>', '<PageDown>'],
\ 'pageUp': ['<C-b>', '<PageUp>']
\}

if s:using_snippets
  let g:OmniSharp_want_snippet = 1
endif

let g:OmniSharp_highlight_groups = {
\ 'ExcludedCode': 'NonText'
\}
" }}}

"Temp Files/BackUp/Swap{{{
set nobackup
set noswapfile
"}}}

" Window Params {{{ 
set lines=35 columns=125
set numberwidth=4
set guifont=Roboto_Mono_Light:h16:W300:cANSI:qDRAFT
winpos 1250 700
"}}}

" StatusLine {{{
set statusline=%f         "Path to the file
set statusline+=%=
set statusline+=%l        "Current line
set statusline+=/         "Separator
set statusline+=%L        "Totla lines
set laststatus=2          "Make statusline visible
"}}}

" Artistic Style {{{
autocmd BufNewFile,BufRead *.cs set formatprg=astyle\ -A1Txe 
"}}}

" On entering a buffer change the working directory to the file where it's
" located
autocmd BufEnter * silent! lcd %:p:h

" Mappings{{{
nno gt :execute "rightbelow split " . bufname("#")<cr>
" operator mapping replacing p with i( which stands for 'change inside
" paranthesis'
"useful with cp or dp mappings
ono p i(

" use jk and kj to save a file in insert mode
ino jk <esc>:w<cr>
ino kj <esc>:w<cr>

" Unmap esc in insert mode, nop is no operation
ino <esc> <nop>

"map leader
let mapleader = ","

"Open vimrc in normal mode with leader ev
nnoremap <leader>ev :split $MYVIMRC<cr>

"Refresh vimrc in normal mode with leader sv
nnoremap <leader>sv :source $MYVIMRC<cr>

map <leader>te :term ++close<cr>
map / /\c
map ? ?\c
nmap <leader>n :nohlsearch<cr>

"look in re
nno fd :FZF ~/source/repos/ <CR>
nno fc :FZF <CR>
nno fh :FZF ~ <CR>

" Buffers
"Move to the previous buffer with "gp"
nnoremap gp :bp<CR>
" Move to the next buffer with "gn"
nnoremap gn :bn<CR>
" List all possible buffers with "gl"
nnoremap gl :ls<CR>

" List all possible buffers with "gb" and accept a new buffer argument [1]
nnoremap gb :ls<CR>:b

"}}}

"Abbreviation {{{
iabbrev esle else
 "}}}

" Commands {{{
command Gr cd ~/source/repos/
command T NERDTreeToggle
command Ms cd ~/Desktop/MyStuff/ 
 "}}}

" Shell {{{
"Set default shell to bash
set shell=C:\Users\kmilchev\AppData\Local\Programs\Git\bin\bash.exe

"Set default grep tp use unix grep as bash is our shell
set grepprg=grep\ -n
 "}}}

" VimScript file {{{
	augroup filetype_vim
		autocmd!
		autocmd FileType vim setlocal foldmethod=marker
	augroup END
 "}}}

